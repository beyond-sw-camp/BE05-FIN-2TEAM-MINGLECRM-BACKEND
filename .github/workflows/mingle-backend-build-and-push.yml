# 1. 워크플로우의 이름 지정
name: Mingle Backend Build and Push

#2. 워크플로우가 시작될 조건 지정
on:
  push:
    branches:
      - main
      - dev
      - feature
      - feature2
      - feature2-inquiry

# 해당 코드에서 사용될 변수 설정
env:
  PROJECT_NAME: mingle
  BUCKET_NAME: mingle.bucket
  CODE_DEPLOY_APP_NAME: codeDeploy
  DEPLOYMENT_GROUP_NAME: codeDeploy

jobs:
  build:
    runs-on: ubuntu-latest # 3. 실행 환경 지정

    # 4. 실행 스텝 지정
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/mingle-backend:latest

      - name: Set up AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Make application-aws.properties
        run: |
          cd ./src/main/resources
          echo "${{ secrets.PROPERTIES }}" > ./application-aws.properties
        shell: bash

      - name: Make Zip File
        run: zip -qq -r ./$GITHUB_SHA.zip .
        shell: bash

      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$BUCKET_NAME/$PROJECT_NAME/$GITHUB_SHA.zip

      - name: Code Deploy
        run: aws deploy create-deployment --application-name $CODE_DEPLOY_APP_NAME --deployment-config-name CodeDeployDefault.OneAtATime --deployment-group-name $DEPLOYMENT_GROUP_NAME --s3-location bucket=$BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip

      - name: Deploy Application
        run: |
          ssh -i /c/Users/Playdata/mingle.pem -o StrictHostKeyChecking=no ubuntu@43.201.102.140 'bash -s' < ./scripts/deploy.sh

      - name: Stop Application
        run: |
          ssh -i /c/Users/Playdata/mingle.pem -o StrictHostKeyChecking=no ubuntu@43.201.102.140 'bash -s' < ./scripts/stop.sh

      # 빌드가 완료되면 슬랙으로 알림
      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: www-be
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          if_mention: failure,cancelled
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()