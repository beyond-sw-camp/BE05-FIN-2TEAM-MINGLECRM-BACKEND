# 1. 워크플로우의 이름 지정
name: Mingle Backend Build and Push

#2. 워크플로우가 시작될 조건 지정
on:
  push:
    branches:
      - main
      - dev
      - feature
      - feature2
      - feature2-inquiry

# 해당 코드에서 사용될 변수 설정
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: mingle.bucket
  CODE_DEPLOY_APPLICATION_NAME: codeDeploy
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: codeDeploy
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
  SMTP_EMAIL: ${{ secrets.SMTP_EMAIL }}
  SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest # 3. 실행 환경 지정

    # 4. 실행 스텝 지정
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/mingle-backend:latest

      - name: Set up AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Make application-aws.properties
        run: |
          cd ./src/main/resources
          echo "${{ secrets.PROPERTIES }}" > ./application-aws.properties
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > ./application-aws.properties
          echo "JWT_SECRET_KEY=asd@asdklassddghj@wg@dhjgadhasgdd@wgSDAwSadsbdjhA@SDwdSADSAWwdwasDWDASdwdaSDWdasdwdas@DNwdASNdAdawdjkahsdjkhwuadhwkdh2djkhdajksd" >> ./application-aws.properties
          echo "SMTP_EMAIL=${{ secrets.SMTP_EMAIL }}" >> ./application-aws.properties
          echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> ./application-aws.properties
        shell: bash

      - name: Make Zip File
        run: zip -qq -r ./$GITHUB_SHA.zip .
        shell: bash

      - name: Upload to S3
        run: |
          aws deploy push \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --ignore-hidden-files \
            --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
            --source .

      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip

      # 빌드가 완료되면 슬랙으로 알림
      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: www-be
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          if_mention: failure,cancelled
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
